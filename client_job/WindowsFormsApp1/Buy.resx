<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAABgAAAAaAAAAGgAAABoAAAAaAAA
        AGgAAABSAAAAAAAAAAAAAAAAAAAAAAAAABIAAABkAAAAaAAAAGgAAABoAAAAaAAAAGgAAABoAAAAaAAA
        AGgAAABoAAAAaAAAAGgAAABoAAAAYAAAABwAAAAAAAAAAAAAAAAAAABKAAAA9QAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAAkAAAAAAAAAAAAAAAAAAAAfAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA9QAAAEoAAAAAAAAAAgAAAOUAAAD7AAAAjQAA
        AHoAAAB6AAAAegAAAHoAAAC7AAAA/wAAAHgAAAAAAAAAAAAAAAIAAADFAAAA/wAAAKEAAAB6AAAAegAA
        AHoAAAB6AAAAegAAAHoAAAB6AAAAegAAAHoAAAB6AAAAegAAAI0AAAD7AAAA5QAAAAIAAAAUAAAA/wAA
        AM8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYAAAD3AAAA/QAAAJ0AAABmAAAAuQAAAP8AAADZAAAACAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM8AAAD/AAAAFAAA
        ABYAAAD/AAAAywAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE4AAADvAAAA/wAAAP8AAAD/AAAA2wAA
        ACYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAywAA
        AP8AAAAWAAAAFgAAAP8AAADLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAABgAAAAfAAA
        AFYAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADLAAAA/wAAABYAAAAWAAAA/wAAAMsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAMsAAAD/AAAAFgAAABYAAAD/AAAAywAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAywAAAP8AAAAWAAAAFgAAAP8AAADLAAAAAAAAAAAAAAAAAAAAAAAA
        ABAAAAAeAAAAHgAAABQAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAD4AAAAaAAAAAAAAAAAAAAAAAAAABgAA
        AB4AAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLAAAA/wAAABYAAAAWAAAA/wAAAMsAAAAAAAAAAAAA
        AAAAAAAAAAAAjwAAAP0AAADxAAAA/QAAAMsAAAAcAAAAAAAAAHAAAAD9AAAA9wAAAPsAAABqAAAAAAAA
        AAAAAAAsAAAA/wAAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMsAAAD/AAAAFgAAABYAAAD/AAAAywAA
        AAAAAAAAAAAAAAAAAAAAAACPAAAA0wAAAAAAAAASAAAA3wAAAIsAAAAKAAAA9wAAAIEAAAAAAAAAgQAA
        APEAAAAGAAAAAAAAACwAAAD/AAAAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAywAAAP8AAAAWAAAAFgAA
        AP8AAADLAAAAAAAAAAAAAAAAAAAAAAAAAI8AAADVAAAACgAAACIAAADhAAAAfgAAADAAAAD/AAAAMgAA
        AAAAAAAwAAAA/wAAACYAAAAAAAAAQAAAAP8AAABMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLAAAA/wAA
        ABYAAAAWAAAA/wAAAMsAAAAAAAAAAAAAAAAAAAAAAAAAjwAAAP8AAAD9AAAA/wAAAL0AAAAIAAAANgAA
        AP8AAAAsAAAAAAAAACoAAAD/AAAALAAAAAAAAACtAAAA6QAAALsAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AMsAAAD/AAAAFgAAABYAAAD/AAAAywAAAAAAAAAAAAAAAAAAAAAAAACPAAAA0wAAAAAAAABKAAAA+wAA
        ACAAAAA2AAAA/wAAACwAAAAAAAAAKgAAAP8AAAAsAAAAKAAAAP0AAABCAAAA+wAAADQAAAAAAAAAAAAA
        AAAAAAAAAAAAywAAAP8AAAAWAAAAFgAAAP8AAADLAAAAAAAAAAAAAAAAAAAAAAAAAI8AAADdAAAAPgAA
        AHoAAAD/AAAAMAAAADYAAAD/AAAALAAAAAAAAAAqAAAA/wAAACwAAACfAAAAwwAAAAAAAACtAAAArwAA
        AAAAAAAAAAAAAAAAAAAAAADLAAAA/wAAABYAAAAWAAAA/wAAAMsAAAAAAAAAAAAAAAAAAAAAAAAAdgAA
        ANEAAADRAAAAwwAAAG4AAAAAAAAALAAAANEAAAAkAAAAAAAAACIAAADRAAAANAAAAM0AAABSAAAAAAAA
        AD4AAADPAAAAGgAAAAAAAAAAAAAAAAAAAMsAAAD/AAAAFgAAABYAAAD/AAAAywAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAywAAAP8AAAAWAAAAFgAAAP8AAADLAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLAAAA/wAAABYAAAAWAAAA/wAA
        AMsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMsAAAD/AAAAFgAA
        ABYAAAD/AAAAywAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAABuAAAAzQAAAOkAAADDAAAAWAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAywAA
        AP8AAAAWAAAAFgAAAP8AAADLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAArwAAAP8AAAD/AAAA+wAA
        AP8AAAD/AAAAhwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAADLAAAA/wAAABYAAAAOAAAA/QAAAOEAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAFYAAAD/AAAAzQAA
        ACAAAAAGAAAAdAAAAP8AAAD9AAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAACAAAAOEAAAD9AAAADgAAAAAAAACzAAAA/wAAAPEAAADnAAAA5wAAAOcAAADnAAAA8wAA
        AP8AAABAAAAAAAAAAAAAAAAAAAAAyQAAAP8AAADvAAAA5wAAAOcAAADnAAAA5wAAAOcAAADnAAAA5wAA
        AOcAAADnAAAA5wAAAOcAAADxAAAA/wAAALEAAAAAAAAAAAAAABIAAACnAAAA8wAAAPsAAAD7AAAA+wAA
        APsAAAD7AAAA5QAAABAAAAAAAAAAAAAAAAAAAACDAAAA+wAAAPsAAAD7AAAA+wAAAPsAAAD7AAAA+wAA
        APsAAAD7AAAA+wAAAPsAAAD7AAAA+wAAAO8AAACfAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////////8A+AAOPPH/xn4j/+Z/B//mf///5n///+Z//
        //mf///5ng49+Z5knfmebd35ng3Y+Z5t2vmebdJ5nx3XeZ////mf///5n///+Z/j//mfgP/5n5z/+YA8
        AAHAPAAD//////////////////////////8=
</value>
  </data>
</root>